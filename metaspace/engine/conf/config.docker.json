{
  "__comment__": "Copy this file to 'config.json' to use inside a docker environment",
  "bottle": {
    "host": "0.0.0.0",
    "port": 5123,
    "debug": false,
    "server": "cherrypy"
  },
  "db": {
    "host": "postgres",
    "database": "sm",
    "user": "sm",
    "password": "password"
  },
  "elasticsearch": {
    "index": "sm",
    "host": "elasticsearch",
    "port": "9200",
    "user": "elastic",
    "password": "elastic"
  },
  "rabbitmq": {
    "host": "rabbitmq",
    "user": "sm",
    "password": "password"
  },
  "services": {
    "img_service_url": "http://graphql:4201",
    "img_service_public_url:comment": "This is needed for lithops colocalization/ion thumbnails when running in IBM Cloud. You can use use ngrok.io to make a publicly-accessible URL to your local graphql server",
    "img_service_public_url": "http://graphql:4201",
    "off_sample": false,
    "web_app_url": "http://localhost:8999",
    "send_email": false,
    "update_daemon_threads": 4,
    "colocalization": false,
    "ion_thumbnail": false
  },
  "redis": {
    "host": "redis"
  },
  "fs": {
    "data_path": "/opt/data/metaspace",
    "spark_data_path": "/tmp/metaspace",
    "s3_base_path": ""
  },
  "spark": {
    "master": "local[*]",
    "spark.executor.memory": "2g",
    "spark.driver.memory": "4g",
    "spark.serializer": "org.apache.spark.serializer.KryoSerializer",
    "spark.kryoserializer.buffer.max": "128m",
    "spark.python.worker.memory": "512m",
    "spark.rdd.compress": true,
    "spark.ui.showConsoleProgress": false,
    "spark.sql.execution.arrow.enabled": true
  },
  "lithops": {
    "lithops": {
      "storage_bucket": "TEMP_BUCKET",
      "storage": "localhost",
      "mode": "localhost",
      "include_modules": [
        "engine/sm"
      ],
      "data_cleaner": true,
      "data_limit": false,
      "workers": 4,
      "execution_timeout": 2400
    },
    "serverless": {
      "backend": "ibm_cf",
      "runtime_timeout": 1200,
      "runtime_memory": 2048
    },
    "standalone": {
      "backend": "ibm_vpc"
    },
    "localhost": {},
    "ibm": {
      "iam_api_key": ""
    },
    "ibm_cf": {
      "endpoint": "https://eu-de.functions.cloud.ibm.com",
      "namespace": "",
      "namespace_id": ""
    },
    "ibm_vpc": {
      "endpoint": "https://eu-de.iaas.cloud.ibm.com",
      "instance_id": "",
      "ip_address": "",
      "ssh_key_filename": "/home/ubuntu/.ssh/ibm_cloud_vpc"
    },
    "ibm_cos": {
      "region": "eu-de",
      "access_key": "",
      "secret_key": ""
    },
    "sm_storage": {
      "imzml": [
        "DATA_BUCKET",
        "imzml"
      ],
      "moldb": [
        "DATA_BUCKET",
        "moldb"
      ],
      "centroids": [
        "DATA_BUCKET",
        "centroids"
      ],
      "pipeline_cache": [
        "TEMP_BUCKET",
        "pipeline_cache"
      ]
    }
  },
  "slack": {
    "channel": "",
    "webhook_url": ""
  },
  "isotope_storage": {
    "path": "/opt/data/metaspace/isotope_storage"
  },
  "logs": {
    "version": 1,
    "formatters": {
      "sm": {
        "format": "%(asctime)s - %(levelname)s - %(name)s[%(threadName)s] - %(filename)s:%(lineno)d - %(message)s"
      }
    },
    "handlers": {
      "console_debug": {
        "class": "logging.StreamHandler",
        "formatter": "sm"
      },
      "context_logger": {
        "class": "sm.engine.utils.log_capture.ContextLogHandler",
        "formatter": "sm",
        "level": "INFO"
      }
    },
    "root": {
      "handlers": [
        "console_debug",
        "context_logger"
      ],
      "level": "INFO"
    },
    "loggers": {
      "engine": {
        "level": "DEBUG"
      },
      "engine.db": {
        "level": "INFO"
      },
      "engine.lithops-wrapper": {
        "level": "INFO"
      },
      "api": {
        "level": "INFO"
      },
      "annotate-daemon": {
        "level": "INFO"
      },
      "lithops-daemon": {
        "level": "INFO"
      },
      "update-daemon": {
        "level": "INFO"
      },
      "lithops": {
        "level": "INFO"
      }
    }
  },
  "ds_config_defaults": {
    "adducts": {
      "+": [
        "+H",
        "+Na",
        "+K"
      ],
      "-": [
        "-H",
        "+Cl"
      ]
    }
  },
  "storage": {
    "endpoint_url": "http://storage:9000",
    "access_key_id": "minioadmin",
    "secret_access_key": "minioadmin"
  },
  "image_storage": {
    "bucket": "sm-image-storage-dev"
  }
}

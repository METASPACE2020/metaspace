import { computed, defineComponent, reactive } from 'vue'
import { ElSelect, ElOptionGroup, ElOption, ElCarousel, ElCarouselItem } from '../../../lib/element-plus'
import { keyBy } from 'lodash'
import ImageLoader from '../../../components/ImageLoader.vue'
import './DatasetOverviewGallery.scss'
import safeJsonParse from '../../../lib/safeJsonParse'

enum ITEM_TYPES {
  IMAGE = 'image',
  TEXT = 'text',
}

interface RawDiagnosticData {
  id: string
  data: string
  imageIds: string[]
  metadata: string
}

interface DatasetOverviewGalleryOption {
  label: string
  value: any
  type?: string
  options?: DatasetOverviewGalleryOption[]
}

interface DatasetOverviewGalleryProps {
  data: RawDiagnosticData[]
  options: any[]
}

interface DatasetOverviewGalleryState {
  selectedOption: DatasetOverviewGalleryOption
  selectedValue: any
  showCarouselItem: boolean
}

export const DatasetOverviewGallery = defineComponent<DatasetOverviewGalleryProps>({
  name: 'DatasetOverviewGallery',
  props: {
    data: { type: Array as () => RawDiagnosticData[], required: true },
    options: {
      type: Array as () => DatasetOverviewGalleryOption[],
      default: () => [
        {
          value: 1,
          label: 'TIC',
          options: [
            {
              value: 1,
              label: 'Autogenerated Image 1',
              type: 'image',
            },
            {
              value: 2,
              label: 'Optical Image',
              type: 'text',
            },
          ],
        },
        {
          value: 2,
          label: 'Defined regions',
          options: [
            {
              value: 3,
              label: 'Autogenerated Image 1',
              type: 'image',
            },
            {
              value: 4,
              label: 'Optical Image',
              type: 'text',
            },
          ],
        },
      ],
    },
  },
  setup(props) {
    const diagnosticDataLookup = computed(() => {
      const parsed = props.data?.map(({ data, ...rest }) => ({ ...rest, data: JSON.parse(data) }))
      return keyBy(parsed, 'id')
    })
    const mockImg: any = diagnosticDataLookup?.value?.ionPreview?.imageIds

    const setSelectedValue = (option: any) => {
      if (option?.type === ITEM_TYPES.TEXT) {
        const metadata = diagnosticDataLookup?.value?.ionPreview?.metadata

        return safeJsonParse(metadata)
      }

      return mockImg
    }

    const state = reactive<DatasetOverviewGalleryState>({
      showCarouselItem: true,
      selectedValue: setSelectedValue(
        (Array.isArray(props.options[0]?.options)
          ? props.options[0]?.options[0]
          : undefined) as DatasetOverviewGalleryOption
      ),
      selectedOption: (Array.isArray(props.options[0]?.options)
        ? props.options[0]?.options[0]
        : undefined) as DatasetOverviewGalleryOption,
    })

    const handleOptionChange = (option: any) => {
      state.selectedOption = option
      state.selectedValue = setSelectedValue(option)
    }

    const handleCarouselChange = () => {
      // quick fix to imageloader redraw
      state.showCarouselItem = false
      setTimeout(() => {
        state.showCarouselItem = true
      }, 0)
    }

    return () => {
      const { options } = props
      const { selectedOption, selectedValue, showCarouselItem } = state

      return (
        <div class="dataset-overview-gallery-wrapper">
          <ElSelect
            class="ds-overview-select"
            value={selectedOption}
            onChange={handleOptionChange}
            placeholder="Select"
          >
            {Array.isArray(options) &&
              options.map((groupOption) => {
                return (
                  <ElOptionGroup key={groupOption.value} label={groupOption.label}>
                    {Array.isArray(groupOption.options) &&
                      groupOption.options.map((option: any) => {
                        return <ElOption key={option.value} label={option.label} value={option} />
                      })}
                  </ElOptionGroup>
                )
              })}
          </ElSelect>
          <div class="ds-overview-container">
            {selectedOption?.type === ITEM_TYPES.IMAGE && (
              <ElCarousel
                onChange={handleCarouselChange}
                arrow={`${Array.isArray(mockImg) && mockImg.length > 1 ? 'always' : 'never'}`}
                indicatorPosition={`${Array.isArray(mockImg) && mockImg.length > 1 ? 'outside' : 'none'}`}
                autoplay={false}
              >
                {Array.isArray(selectedValue) &&
                  selectedValue.map((image) => {
                    return (
                      <ElCarouselItem>
                        {showCarouselItem && (
                          <ImageLoader
                            ref="carousel"
                            src={image}
                            imagePosition={{ zoom: 1, xOffset: 0, yOffset: 0 }}
                            minIntensity={0}
                            maxIntensity={1}
                            pixelAspectRatio={1}
                          />
                        )}
                      </ElCarouselItem>
                    )
                  })}
              </ElCarousel>
            )}
            {selectedOption?.type === ITEM_TYPES.TEXT &&
              Object.keys(selectedValue).map((metaKey) => {
                return <div>{metaKey}</div>
              })}
          </div>
        </div>
      )
    }
  },
})

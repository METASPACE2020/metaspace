import { computed, defineComponent, reactive } from '@vue/composition-api'
import { Select, Option, RadioGroup, Radio, InputNumber, Button } from '../../../lib/element-ui'
// @ts-ignore
import ECharts from 'vue-echarts'
import 'echarts/lib/chart/line'
import 'echarts/lib/chart/bar'
import 'echarts/lib/component/toolbox'
import 'echarts/lib/component/grid'
import 'echarts/lib/component/dataZoom'
import 'echarts/lib/component/markPoint'
import 'echarts/lib/component/markArea'
import './DatasetBrowserPage.scss'

interface DatasetBrowserProps {
  className: string
}

interface DatasetBrowserState {
  peakFilter: number
  fdrFilter: number | undefined
  databaseFilter: number | string | undefined
  mzmScoreFilter: number | undefined
  mzmPolarityFilter: number | undefined
  mzmScaleFilter: string | undefined
  chartOptions: any
}

const PEAK_FILTER = {
  ALL: 1,
  FDR: 2,
}

export default defineComponent<DatasetBrowserProps>({
  name: 'DatasetBrowserPage',
  props: {
    className: {
      type: String,
      default: 'dataset-browser',
    },
  },
  setup(props, ctx) {
    const { $router, $route } = ctx.root
    const theoretical = [{
      centroid_mzs: [296.0660118248876, 297.0693785939558, 298.06408618327333,
        298.0703115985592],
      mzs: [296.0586598767171, 296.05890747677, 296.0591550768229,
        296.0594026768758, 296.05965027692866, 296.05989787698155, 296.06014547703444,
        296.0603930770873, 296.0606406771402, 296.0608882771931, 296.061135877246,
        296.0613834772989, 296.06163107735176, 296.06187867740465, 296.06212627745754,
        296.0623738775104, 296.0626214775633, 296.0628690776162, 296.0631166776691,
        296.063364277722, 296.06361187777486, 296.06385947782775, 296.06410707788064,
        296.0643546779335, 296.0646022779864, 296.0648498780393, 296.0650974780922,
        296.06534507814507, 296.06559267819796, 296.06584027825085, 296.06608787830373,
        296.0663354783566, 296.0665830784095, 296.0668306784624, 296.0670782785153,
        296.06732587856817, 296.06757347862106, 296.06782107867394, 296.06806867872683,
        296.0683162787797, 296.0685638788326, 296.0688114788855, 296.0690590789384,
        296.06930667899127, 296.06955427904416, 296.06980187909704, 296.07004947914993,
        296.0702970792028, 296.0705446792557, 296.0707922793086, 296.0710398793615,
        296.07128747941437, 296.07153507946725, 296.07178267952014, 296.072030279573,
        296.0722778796259, 296.0725254796788, 296.0727730797317, 296.0730206797846,
        296.07326827983746, 297.0562404897999, 297.0564880898528, 297.0567356899057,
        297.05698328995857, 297.05723089001145, 297.05747849006434, 297.0577260901172,
        297.0579736901701, 297.058221290223, 297.0584688902759, 297.0587164903288,
        297.05896409038166, 297.05921169043455, 297.05945929048744, 297.0597068905403,
        297.0599544905932, 297.0602020906461, 297.060449690699, 297.0606972907519,
        297.06094489080476, 297.06119249085765, 297.06144009091054, 297.0616876909634,
        297.0619352910163, 297.0621828910692, 297.0624304911221, 297.062678091175,
        297.06292569122786, 297.06317329128075, 297.06342089133364, 297.0636684913865,
        297.0639160914394, 297.0641636914923, 297.0644112915452, 297.06465889159807,
        297.06490649165096, 297.06515409170385, 297.06540169175673, 297.0656492918096,
        297.0658968918625, 297.0661444919154, 297.0663920919683, 297.06663969202117,
        297.06688729207406, 297.06713489212694, 297.06738249217983, 297.0676300922327,
        297.0678776922856, 297.0681252923385, 297.0683728923914, 297.06862049244427,
        297.06886809249715, 297.06911569255004, 297.06936329260293, 297.0696108926558,
        297.0698584927087, 297.0701060927616, 297.0703536928145, 297.07060129286737,
        297.07084889292025, 297.07109649297314, 297.071344093026, 297.0715916930789, 297.0718392931318,
        297.0720868931847, 297.0723344932376, 297.07258209329046, 297.07282969334335, 297.07307729339624,
        297.0733248934491, 297.073572493502, 297.0738200935549, 297.0740676936078, 297.0743152936607,
        297.07456289371356, 297.07481049376645, 297.07505809381934, 297.0753056938722, 297.0755532939251,
        297.075800893978, 297.0760484940309, 297.0762960940838, 297.07654369413666, 297.07679129418955,
        297.07703889424243, 297.0772864942953, 297.0775340943482, 297.0777816944011, 297.078029294454,
        297.07827689450687, 297.07852449455976, 297.07877209461265, 298.05679230351734, 298.0570399035702,
        298.0572875036231, 298.057535103676, 298.0577827037289, 298.0580303037818, 298.05827790383466,
        298.05852550388755, 298.05877310394044, 298.0590207039933, 298.0592683040462, 298.0595159040991,
        298.059763504152, 298.0600111042049, 298.06025870425776, 298.06050630431065, 298.06075390436354,
        298.0610015044164, 298.0612491044693, 298.0614967045222, 298.0617443045751, 298.061991904628,
        298.06223950468086, 298.06248710473375, 298.06273470478664, 298.0629823048395, 298.0632299048924,
        298.0634775049453, 298.0637251049982, 298.06397270505107, 298.06422030510396, 298.06446790515685,
        298.06471550520973, 298.0649631052626, 298.0652107053155, 298.0654583053684, 298.0657059054213,
        298.06595350547417, 298.06620110552706, 298.06644870557994, 298.06669630563283, 298.0669439056857,
        298.0671915057386, 298.0674391057915, 298.0676867058444, 298.06793430589727, 298.06818190595015,
        298.06842950600304, 298.06867710605593, 298.0689247061088, 298.0691723061617, 298.0694199062146,
        298.0696675062675, 298.06991510632037, 298.07016270637325, 298.07041030642614, 298.070657906479,
        298.0709055065319, 298.0711531065848, 298.0714007066377, 298.0716483066906, 298.07189590674346,
        298.07214350679635, 298.07239110684924, 298.0726387069021, 298.072886306955, 298.0731339070079,
        298.0733815070608, 298.0736291071137, 298.07387670716656, 298.07412430721945, 298.07437190727234,
        298.0746195073252, 298.0748671073781, 298.075114707431, 298.0753623074839, 298.0756099075368,
        298.07585750758966, 298.07610510764255, 298.07635270769543, 298.0766003077483, 298.0768479078012,
        298.0770955078541, 298.077343107907, 298.07759070795987, 298.07783830801276, 298.07808590806565,
        298.07833350811853, 298.0785811081714, 298.0788287082243, 298.0790763082772, 298.0793239083301,
        298.07957150838297, 298.07981910843586, 298.08006670848874, 298.08031430854163, 298.0805619085945,
        298.0808095086474, 298.0810571087003, 298.0813047087532, 298.08155230880607],
      ints: [0.0000025327396997454343, 0.000008102933861664496, 0.000024907047190936282, 0.00007355808338616043,
        0.000208721321541816, 0.0005690251127816737, 0.0014904735144227743, 0.0037509845569729805,
        0.009069733321666718, 0.021070363000035286, 0.04703029245138168, 0.10085828602313995,
        0.20781348645687103, 0.411399781703949, 0.7824968695640564, 1.4299782514572144, 2.5107553005218506,
        4.235528469085693, 6.864975929260254, 10.690516471862793, 15.995084762573242, 22.993370056152344,
        31.757545471191406, 42.14241409301758, 53.730411529541016, 65.81867218017578, 77.46513366699219,
        87.59748840332031, 95.17113494873047, 99.34524536132812, 99.63619232177734, 96.00975799560547,
        88.88773345947266, 79.06723022460938, 67.57396697998047, 55.48691177368164, 43.77537536621094,
        33.181610107421875, 24.16535758972168, 16.908971786499023, 11.367616653442383, 7.342599391937256,
        4.556784629821777, 2.7170355319976807, 1.5565404891967773, 0.8567492365837097, 0.45308032631874084,
        0.23021040856838226, 0.11238358914852142, 0.05271194875240326, 0.023754365742206573,
        0.01028504129499197, 0.0042785522527992725, 0.0017100777477025986, 0.0006566941738128662,
        0.00024229173141065985, 0.0000858899365994148, 0.000029253254979266785, 0.000009572696399118286,
        0.0000030096960017544916, 1.2584973774210084e-7, 3.660097434021736e-7, 0.0000010230047564618872,
        0.000002747940470726462, 0.000007093843578331871, 0.00001759950646373909, 0.00004196275767753832,
        0.00009615506860427558, 0.00021175076835788786, 0.0004481489595491439, 0.0009115164284594357,
        0.0017817685147747397, 0.003347207559272647, 0.006043085362762213, 0.010485267266631126,
        0.017484169453382492, 0.028019176796078682, 0.04315297305583954, 0.06387211382389069,
        0.09085681289434433, 0.12420812994241714, 0.16318868100643158, 0.2060532569885254,
        0.2500471770763397, 0.2916237711906433, 0.32688307762145996, 0.35216641426086426,
        0.3646870255470276, 0.36305010318756104, 0.34753233194351196, 0.32005465030670166,
        0.28386712074279785, 0.24305275082588196, 0.20201483368873596, 0.1651301383972168,
        0.13672073185443878, 0.12143532186746597, 0.12504306435585022, 0.15553829073905945,
        0.22433483600616455, 0.3471982777118683, 0.544447660446167, 0.8399035930633545,
        1.2581405639648438, 1.819885492324829, 2.5359060764312744, 3.4003918170928955,
        4.385429382324219, 5.438483715057373, 6.484535217285156, 7.433632850646973,
        8.193187713623047, 8.682847023010254, 8.848674774169922, 8.673181533813477,
        8.17862319946289, 7.42268180847168, 6.487670421600342, 5.466015338897705,
        4.445516586303711, 3.4975626468658447, 2.670300006866455, 1.987241268157959,
        1.4504002332687378, 1.0462255477905273, 0.752392053604126, 0.5438748002052307,
        0.3973599970340729, 0.2937241196632385, 0.21881940960884094, 0.16308189928531647,
        0.12052752077579498, 0.08760324865579605, 0.06219205632805824, 0.042903218418359756,
        0.028654446825385094, 0.01848207414150238, 0.011493084020912647, 0.006882860325276852,
        0.003966739866882563, 0.0021990060340613127, 0.0011722338385879993, 0.0006007736665196717,
        0.0002958474797196686, 0.00014012155588716269, 0.0000637832927168347, 0.000027904115995625034,
        0.000011730489859473892, 0.000004741402335639577, 0.0000018414008309264318, 6.872818971714878e-7,
        2.4652811703163025e-7, 2.458987751197128e-7, 7.729204867246153e-7, 0.0000023354664335784037,
        0.000006783795015508076, 0.00001894227898446843, 0.00005084544318378903, 0.00013119951472617686,
        0.0003254413604736328, 0.0007760212756693363, 0.0017788325203582644, 0.0039197346195578575,
        0.008303070440888405, 0.016907569020986557, 0.03309664875268936, 0.06227982044219971,
        0.11266037821769714, 0.19590958952903748, 0.3274921178817749, 0.5262678265571594,
        0.8129689693450928, 1.2072646617889404, 1.7234269380569458, 2.365079641342163,
        3.1200547218322754, 3.9567947387695312, 4.823826313018799, 5.653397083282471,
        6.369437217712402, 6.898779392242432, 7.183424949645996, 7.191030025482178,
        6.920995712280273, 6.404569149017334, 5.698933124542236, 4.876837730407715,
        4.014376163482666, 3.179746389389038, 2.4252536296844482, 1.7836487293243408,
        1.2686854600906372, 0.8787858486175537, 0.6022679209709167, 0.4226272404193878,
        0.32276836037635803, 0.2876293361186981, 0.30514612793922424, 0.36586835980415344,
        0.46173956990242004, 0.5846181511878967, 0.7250702381134033, 0.8718383312225342,
        1.0121921300888062, 1.1331244707107544, 1.2231093645095825, 1.2739520072937012,
        1.2822014093399048, 1.2496936321258545, 1.1830286979675293, 1.0920937061309814,
        0.9880150556564331, 0.8810737133026123, 0.7790939211845398, 0.6866388320922852,
        0.6050877571105957, 0.5334144234657288, 0.46932661533355713, 0.4103909730911255,
        0.354850709438324, 0.3019951283931732, 0.25210005044937134, 0.20607563853263855,
        0.16500383615493774, 0.12973089516162872, 0.1006171703338623, 0.0774732306599617,
        0.05965029075741768, 0.046219415962696075, 0.03616964444518089, 0.028571123257279396,
        0.022675205022096634, 0.017948318272829056, 0.01405390352010727, 0.010804487392306328,
        0.008105436339974403, 0.005906068254262209, 0.004166050814092159, 0.00283828261308372,
        0.0018647038377821445, 0.0011801350628957152, 0.0007189816096797585, 0.0004214951768517494,
        0.0002376703341724351, 0.00012888386845588684, 0.00006720543751725927, 0.000033694035664666444,
        0.000016238725947914645, 0.000007525587534473743, 0.000003352790145072504, 0.0000014357023019329063,
        5.911464882046857e-7, 2.3405290505706944e-7],
    }]
    const theoreticalData = []
    const sample = [{
      mzs: [296.0659429376638, 297.0693303315069, 298.0640585924282, 298.07038563946],
      ints: [2472329871360, 209239048192, 176409133056, 26591072256],
    }]
    const sampleData = []
    let minX
    let maxX
    const maxIntensity = Math.max(...sample[0].ints)
    const pinPos = []
    const areaPos = []

    for (let i = 0; i < theoretical[0].mzs.length; i++) {
      theoreticalData.push([theoretical[0].mzs[i], theoretical[0].ints[i]])
      if (!minX || theoretical[0].mzs[i] < minX) {
        minX = theoretical[0].mzs[i]
      }
      if (!maxX || theoretical[0].mzs[i] > maxX) {
        maxX = theoretical[0].mzs[i]
      }
    }

    for (let i = 0; i < sample[0].mzs.length; i++) {
      const xAxis = sample[0].mzs[i]
      const yAxis = sample[0].ints[i] / maxIntensity * 100.0
      sampleData.push([xAxis, yAxis])
      pinPos.push({
        xAxis: xAxis,
        yAxis: yAxis,
      })

      areaPos.push([
        { xAxis: xAxis - 0.001, yAxis: 0 },
        { xAxis: xAxis + 0.001, yAxis: yAxis },
      ])
    }

    const state = reactive<DatasetBrowserState>({
      peakFilter: PEAK_FILTER.ALL,
      fdrFilter: undefined,
      databaseFilter: undefined,
      mzmScoreFilter: undefined,
      mzmPolarityFilter: undefined,
      mzmScaleFilter: undefined,
      chartOptions: {
        toolbox: {
          feature: {
            dataZoom: {
              yAxisIndex: 'none',
            },
            saveAsImage: {},
          },
        },
        xAxis: {
          type: 'value',
          min: minX,
          max: maxX,
        },
        yAxis: {
          type: 'value',
          boundaryGap: [0, '30%'],
        },
        dataZoom: [{
          type: 'slider',
          xAxisIndex: 0,
          filterMode: 'empty',
        },
        {
          type: 'slider',
          yAxisIndex: 0,
          filterMode: 'empty',
          right: 16,
        },
        {
          type: 'inside',
          xAxisIndex: 0,
          filterMode: 'empty',
        },
        ],
        series: [
          {
            type: 'line',
            smooth: 0.6,
            symbol: 'none',
            lineStyle: {
              color: '#5470C6',
              width: 5,
            },
            data: theoreticalData,
          },
          {
            name: '蒸发量',
            type: 'bar',
            data: sampleData,
            barWidth: 2,
            itemStyle: {
              color: 'red',

            },
            markArea: {
              data: areaPos,
            },
            markPoint: {
              symbol: 'circle',
              symbolSize: 10,
              label: {
                show: false,
              },
              data: pinPos,
            },

          },
        ],
      },
    })

    const datasetId = computed(() => $route.params.dataset_id)

    const handleFilterClear = () => {
      state.peakFilter = PEAK_FILTER.ALL
      state.fdrFilter = undefined
      state.databaseFilter = undefined
      state.mzmScoreFilter = undefined
      state.mzmPolarityFilter = undefined
      state.mzmScaleFilter = undefined
    }

    const renderBrowsingFilters = () => {
      return (
        <div class='dataset-browser-holder-filter-box'>
          <span class='font-semibold'>Browsing filters</span>
          <div class='flex flex-row w-full items-end'>
            <RadioGroup
              class='w-3/5'
              onInput={(value: any) => {
                state.peakFilter = value
                if (value === PEAK_FILTER.FDR && !state.fdrFilter) {
                  state.fdrFilter = 0.5
                }
              }}
              value={state.peakFilter}
              size='mini'>
              <Radio class='w-full' label={PEAK_FILTER.ALL}>All Peaks</Radio>
              <div>
                <Radio label={PEAK_FILTER.FDR}>Only annotated at FDR</Radio>
                <Select
                  class='select-box-mini'
                  value={state.fdrFilter}
                  onChange={(value: number) => {
                    state.fdrFilter = value
                    state.peakFilter = PEAK_FILTER.FDR
                  }}
                  placeholder='5%'
                  size='mini'>
                  <Option label="5%" value={0.05}/>
                  <Option label="10%" value={0.1}/>
                  <Option label="50%" value={0.5}/>
                </Select>
              </div>
            </RadioGroup>
            <div class='flex flex-col w-1/4'>
              <span>Database</span>
              <Select
                value={state.databaseFilter}
                size='mini'
                onChange={(value: number) => {
                  state.databaseFilter = value
                }}
                placeholder='HMDB-v4'>
                <Option label="HMDB" value={1}/>
                <Option label="Lipdmaps" value={2}/>
              </Select>
            </div>
          </div>
        </div>
      )
    }

    const renderImageFilters = () => {
      return (
        <div class='dataset-browser-holder-filter-box mt-2'>
          <span class='font-semibold'>Image filters</span>
          <div class='flex flex-row w-full items-end mt-2'>
            <span class='mr-2'>m/z</span>
            <InputNumber
              class='mr-2'
              value={state.mzmScoreFilter}
              onChange={(value: number) => { state.mzmScoreFilter = value }}
              precision={4}
              step={0.0001}
              size='mini'
              placeholder='174.0408'
            />
            <span class='mr-2'>+-</span>
            <InputNumber
              class='mr-2 select-box'
              value={state.mzmPolarityFilter}
              onChange={(value: number) => { state.mzmPolarityFilter = value }}
              precision={1}
              step={0.01}
              size='mini'
              placeholder='2.5'
            />
            <Select
              class='select-box-mini'
              value={state.mzmScaleFilter}
              onChange={(value: string) => {
                state.mzmScaleFilter = value
              }}
              size='mini'
              placeholder='ppm'>
              <Option label="DA" value='DA'/>
              <Option label="ppm" value='ppm'/>
            </Select>
          </div>
        </div>
      )
    }

    const renderFilterBox = () => {
      return (
        <div>
          {renderImageFilters()}
          {renderBrowsingFilters()}
          <Button class='clear-btn' size='mini' onClick={handleFilterClear}>
            Clear
          </Button>
          <Button class='filter-btn' type='primary' size='mini'>
            Filter
          </Button>
        </div>
      )
    }

    const renderEmptySpectrum = () => {
      return (
        <div class='dataset-browser-empty-spectrum'>
          <i class="el-icon-info info-icon mr-6"/>
          <div class='flex flex-col text-xs w-3/4'>
            <p class='font-semibold mb-2'>Steps:</p>
            <p>1 - Select a pixel on the image viewer</p>
            <p>2 - Apply the filter you desire</p>
            <p>3 - The interaction is multi-way, so you can also update the ion image via spectrum interaction</p>
          </div>
        </div>
      )
    }

    return () => {
      return (
        <div class={'dataset-browser-container'}>
          <div class={'dataset-browser-wrapper w-full lg:w-1/2'}>
            <div class='dataset-browser-holder'>
              <div class='dataset-browser-holder-header'>
                Spectrum browser
              </div>
              {renderFilterBox()}
              {/* {renderEmptySpectrum()} */}
              <ECharts class='chart' options={state.chartOptions}/>
            </div>
          </div>
          <div class='dataset-browser-wrapper w-full lg:w-1/2'>
          </div>
        </div>
      )
    }
  },
})

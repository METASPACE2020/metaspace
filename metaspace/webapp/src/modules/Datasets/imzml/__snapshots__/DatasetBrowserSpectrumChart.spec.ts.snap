// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DatasetBrowserSpectrumChart it should match snapshot when empty 1`] = `
<div
  class="dataset-browser-spectrum-container"
  isempty="true"
>
  <div
    class="dataset-browser-empty-spectrum"
  >
    <i
      class="el-icon-info info-icon mr-6"
    />
    <div
      class="flex flex-col text-xs w-3/4"
    >
      <p
        class="font-semibold mb-2"
      >
        Steps:
      </p>
      <p>
        1 - Select a pixel on the image viewer
      </p>
      <p>
        2 - Apply the filter you desire
      </p>
      <p>
        3 - The interaction is multi-way, so you can also update the ion image via spectrum interaction
      </p>
    </div>
  </div>
</div>
`;

exports[`DatasetBrowserSpectrumChart it should match snapshot when loading chart data 1`] = `
<div
  class="dataset-browser-spectrum-container"
  isdataloading="true"
>
  <div
    class="chart-holder"
  >
    <div
      class="loader-holder"
    >
      <div>
        <i
          class="el-icon-loading"
        />
      </div>
    </div>
    <!--function (el) {
      var obj;

      var args = [], len = arguments.length - 1;
      while ( len-- &gt; 0 ) args[ len ] = arguments[ len + 1 ];
      if (shouldNotBeStubbed(el, stubs, modifiedComponents)) {
        return originalCreateElement.apply(void 0, [ el ].concat( args ))
      }

      if (isConstructor(el) || isComponentOptions(el)) {
        if (stubAllComponents) {
          var stub = createStubFromComponent(el, el.name || 'anonymous', _Vue);
          return originalCreateElement.apply(void 0, [ stub ].concat( args ))
        }
        var Constructor = shouldExtend(el) ? extend(el, _Vue) : el;

        return originalCreateElement.apply(void 0, [ Constructor ].concat( args ))
      }

      if (typeof el === 'string') {
        var original = resolveComponent(el, originalComponents);

        if (!original) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        if (isDynamicComponent(original)) {
          return originalCreateElement.apply(void 0, [ el ].concat( args ))
        }

        var stub$1 = createStubIfNeeded(stubAllComponents, original, _Vue, el);

        if (stub$1) {
          Object.assign(vm.$options.components, ( obj = {}, obj[el] = stub$1, obj ));
          modifiedComponents.add(el);
        }
      }

      return originalCreateElement.apply(void 0, [ el ].concat( args ))
    }-->
  </div>
</div>
`;
